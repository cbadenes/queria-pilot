version: '3.8'
services:
  mongo:
    image: mongo:4.4.6
    command: ["mongod", "--auth"]
    volumes:
      - mongo_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
      - ./mongo-backups:/backups  # Nuevo volumen para backups
    ports:
      - "127.0.0.1:27017:27017"  # Restringir a localhost
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: example
      TZ: Europe/Madrid
    networks:
      - queria_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  mongo-express:
    image: mongo-express:0.54.0
    ports:
      - "127.0.0.1:8081:8081"  # Restringir a localhost
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_BASICAUTH_USERNAME: admin    # Autenticación básica
      ME_CONFIG_BASICAUTH_PASSWORD: example  # para mongo-express
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - queria_network
    restart: always

  rabbitmq:
    image: rabbitmq:3.8-management
    ports:
      - "127.0.0.1:5672:5672"    # Restringir a localhost
      - "127.0.0.1:15672:15672"  # Restringir a localhost
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
      TZ: Europe/Madrid
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - queria_network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    restart: always

networks:
  queria_network:
    driver: bridge

volumes:
  mongo_data:
    driver: local
  rabbitmq_data:
    driver: local